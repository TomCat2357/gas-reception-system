Code.js:1316:      '.label{font-weight:600;margin-bottom:6px;display:flex;align-items:center;gap:8px;}',
Code.js:1342:        if (node.hint){ html.push('<div class="label">'+esc(node.hint)+'</div>'); }
Code.js:1356:          html.push('<div class="label">'+esc(node.title||'')+(node.hint?' <span class="hint-badge" title="'+esc(node.hint)+'">hint</span>':'')+'</div>');
Code.js:1363:              html.push('<label class="chip"><input type="radio" name="'+name+'" value="'+esc(opt.title||'')+'" data-role="opt-radio" data-group="'+groupId+'" data-target="'+contId+'">'+esc(opt.title||'')+'</label>');
Code.js:1375:              html.push('<label class="chip"><input type="checkbox" value="'+esc(opt.title||'')+'" data-role="opt-checkbox" data-group="'+cbGroup+'" data-target="'+contId+'">'+esc(opt.title||'')+'</label>');
Code.js:1405:        html.push('<div class="label">'+esc(node.title)+(node.hint?' <span class="hint-badge" title="'+esc(node.hint)+'">hint</span>':'')+'</div>');
Code.js:1413:        html.push('<div class="label">'+esc(node.title||'')+(node.hint?' <span class="hint-badge" title="'+esc(node.hint)+'">hint</span>':'')+'</div>');
Code.js:1431:      'function getLabelText(label){ if(!label) return ""; var c=label.cloneNode(true); var badges=c.querySelectorAll(\'.hint-badge\'); for(var i=0;i<badges.length;i++){badges[i].remove();} return (c.textContent||\'\').trim(); }\n' +
Code.js:1442:      'function toJson(){ var root=document.getElementById(\'blocks\'); var steps=root?root.querySelectorAll(\'.step\'):[]; var out={}; function add(key,val){ if(!key) return; if(out.hasOwnProperty(key)){ if(!Array.isArray(out[key])) out[key]=[out[key]]; out[key].push(val); } else { out[key]=val; } } for(var i=0;i<steps.length;i++){ var step=steps[i]; var label=step.querySelector(\'.label\'); var key=getLabelText(label); if(!key) continue; var radios=step.querySelectorAll(\'input[type=radio]\'); if(radios.length){ var chosen=null; for(var r=0;r<radios.length;r++){ if(radios[r].checked){ chosen=radios[r].value; break; } } add(key, chosen); continue; } var checks=step.querySelectorAll(\'input[type=checkbox]\'); if(checks.length){ var vals=[]; for(var c=0;c<checks.length;c++){ if(checks[c].checked) vals.push(checks[c].value); } add(key, vals); continue; } var sel=step.querySelector(\'select\'); if(sel){ var opt=sel.options[sel.selectedIndex]; var val=opt?opt.textContent:sel.value; add(key, val); continue; } var ta=step.querySelector(\'textarea\'); if(ta){ add(key, ta.value); continue; } var txt=step.querySelector(\'input[type=text],input[type=date],input[type=time],input[type=number],input[type=email],input[type=tel],input[type=hidden]\'); if(txt){ add(key, txt.value); continue; } } return out; }\n' +
csv_form_builder.js:226:      '.label{font-weight:600;margin-bottom:6px;display:flex;align-items:center;gap:8px;}',
csv_form_builder.js:253:        if (node.hint){ html.push('<div class="label">'+esc(node.hint)+'</div>'); }
csv_form_builder.js:270:            html.push('<div class="label">'+esc(node.title || '') + (node.hint? ' <span class="hint-badge" title="'+esc(node.hint)+'">hint</span>':'' ) + '</div>');
csv_form_builder.js:278:              html.push('<label class="chip"><input type="radio" name="'+name+'" value="'+esc(opt.title||'')+'" data-role="opt-radio" data-group="'+groupId+'" data-target="'+contId+'">'+esc(opt.title||'')+'</label>');
csv_form_builder.js:292:              html.push('<label class="chip"><input type="checkbox" value="'+esc(opt.title||'')+'" data-role="opt-checkbox" data-group="'+cbGroup+'" data-target="'+contId+'">'+esc(opt.title||'')+'</label>');
csv_form_builder.js:323:        html.push('<div class="label">' + esc(node.title) + (node.hint? ' <span class="hint-badge" title="'+esc(node.hint)+'">hint</span>':'' ) + '</div>');
csv_form_builder.js:331:        html.push('<div class="label">'+esc(node.title||'') + (node.hint? ' <span class="hint-badge" title="'+esc(node.hint)+'">hint</span>':'' ) + '</div>');
csv_form_builder.js:351:      'function getLabelText(label){ if(!label) return ""; var c=label.cloneNode(true); var badges=c.querySelectorAll(\'.hint-badge\'); for(var i=0;i<badges.length;i++){badges[i].remove();} return (c.textContent||\'\').trim(); }\n' +
csv_form_builder.js:366:      'function toJson(){ var root=document.getElementById(\'blocks\'); var steps=root?root.querySelectorAll(\'.step\'):[]; var out={}; function add(key,val){ if(!key) return; if(out.hasOwnProperty(key)){ if(!Array.isArray(out[key])) out[key]=[out[key]]; out[key].push(val); } else { out[key]=val; } } for(var i=0;i<steps.length;i++){ var step=steps[i]; var label=step.querySelector(\'.label\'); var key=getLabelText(label); if(!key) continue; var radios=step.querySelectorAll(\'input[type=radio]\'); if(radios.length){ var chosen=null; for(var r=0;r<radios.length;r++){ if(radios[r].checked){ chosen=radios[r].value; break; } } add(key, chosen); continue; } var checks=step.querySelectorAll(\'input[type=checkbox]\'); if(checks.length){ var vals=[]; for(var c=0;c<checks.length;c++){ if(checks[c].checked) vals.push(checks[c].value); } add(key, vals); continue; } var sel=step.querySelector(\'select\'); if(sel){ var opt=sel.options[sel.selectedIndex]; var val=opt?opt.textContent:sel.value; add(key, val); continue; } var ta=step.querySelector(\'textarea\'); if(ta){ add(key, ta.value); continue; } var txt=step.querySelector(\'input[type=text],input[type=date],input[type=time],input[type=number],input[type=email],input[type=tel],input[type=hidden]\'); if(txt){ add(key, txt.value); continue; } } return out; }\n' +
reception_form.html:40:    .label { display:block; font-size: 12px; color: var(--muted); margin-bottom: 6px; }
reception_form.html:482:              <div class="field"><span class="label">受付日</span><input type="date" value="${state.meta.receptionDate}" oninput="setIn(['meta','receptionDate'], this.value)"></div>
reception_form.html:483:              <div class="field"><span class="label">受付時刻</span><input type="time" value="${state.meta.receptionTime}" oninput="setIn(['meta','receptionTime'], this.value)"></div>
reception_form.html:484:              <div class="field"><span class="label">担当</span>
reception_form.html:489:              <div class="field"><span class="label">問い合わせ方法</span>
reception_form.html:491:                  ${contactMethods.map(m=>`<label class="chip"><input type="radio" name="contact" value="${m}" ${state.meta.contactMethod===m?'checked':''} onchange="setIn(['meta','contactMethod'], this.value)">${m}</label>`).join('')}
reception_form.html:495:              <div class="field"><span class="label">区</span>
reception_form.html:496:                <div class="chips">${wards.map(w=>`<label class="chip"><input type="radio" name="ward" value="${w}" ${state.meta.ward===w?'checked':''} onchange="setIn(['meta','ward'], this.value)">${w}</label>`).join('')}</div>
reception_form.html:500:              <div class="field"><span class="label">問い合わせ元</span><textarea oninput="setInNoRender(['meta','contactSource'], this.value)">${state.meta.contactSource||''}</textarea></div>
reception_form.html:501:              <div class="field"><span class="label">問い合わせ元への連絡先</span><textarea placeholder="電話・メール等" oninput="setInNoRender(['meta','contactInfo'], this.value)">${state.meta.contactInfo||''}</textarea></div>
reception_form.html:503:            <div class="field"><span class="label">現場住所等</span><textarea oninput="setInNoRender(['meta','siteAddress'], this.value)">${state.meta.siteAddress||''}</textarea></div>
reception_form.html:509:            <div class="field"><span class="label">相談対象</span>
reception_form.html:510:              <div class="chips">${consultationTargets.map(v=>`<label class="chip"><input type="radio" name="target" value="${v}" ${state.consultation.consultationTarget===v?'checked':''} onchange="onConsultationTargetChange(this.value); console.log('🎯 Target change:', this.value)">${v}</label>`).join('')}
reception_form.html:514:              <div class="field"><span class="label">生物カテゴリ詳細（複数選択可）</span>
reception_form.html:518:                      <label class="chip"><input type="checkbox" value="${cat}" ${(state.consultation.selectedCategories||[]).includes(cat)?'checked':''} onchange="onToggleArray(['consultation','selectedCategories'], this.value, this.checked); console.log('🔧 Category toggle:', this.value, this.checked)">${cat}</label>
reception_form.html:520:                        <div class="field indent-1"><span class="label">${cat} の生物カテゴリ詳細（複数選択可）</span>
reception_form.html:521:                          <div class="chips">${biologicalCategories[cat].map(sp=>`<label class="chip"><input type="checkbox" value="${sp}" ${Object.prototype.hasOwnProperty.call(state.consultation.biologicalSpecies[cat]||{}, sp) ? 'checked' : ''} onchange="onBioToggle('${cat}','${sp}', this.checked); console.log('🐾 Bio toggle:', '${cat}', '${sp}', this.checked)">${sp}</label>`).join('')}
reception_form.html:527:                          return hasOther ? `<div class=\"field indent-1\"><span class=\"label\">${cat} その他（具体的に）</span><input type=\"text\" value=\"${(state.consultation.otherBiologyTexts||{})[cat]||''}\" oninput=\"(()=>{ const map={...(state.consultation.otherBiologyTexts||{})}; map['${cat}']=this.value; setInNoRender(['consultation','otherBiologyTexts'], map); console.log('📝 Other text input:', '${cat}', this.value); }).call(this)\"></div>` : '';
reception_form.html:536:            <div class="field"><span class="label">相談種類</span>
reception_form.html:540:                    <label class="chip"><input type="checkbox" value="${opt}" ${renderConsultationTypes.includes(opt)?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','common'], this.value, this.checked)">${opt}</label>
reception_form.html:542:                      <div class="field indent-1"><span class="label">一般論的相談 詳細（複数選択可）</span>
reception_form.html:543:                        <div class="vlist">${consultationTypeOptions.general.map(child=>`<label class="chip"><input type="checkbox" value="${child}" ${(state.consultation.consultationTypes.general||[]).includes(child)?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','general'], this.value, this.checked)">${child}</label>`).join('')}</div>
reception_form.html:547:  <div class="field indent-1"><span class="label">個別案件相談 詳細（複数選択可）</span>
reception_form.html:550:        let childHtml = `<div><label class="chip"><input type="checkbox" value="${child}" ${(state.consultation.consultationTypes.individual||[]).includes(child)?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','individual'], this.value, this.checked)">${child}</label>`;
reception_form.html:553:          childHtml += `<div class="field indent-2"><span class="label">生活環境被害詳細（複数選択可）</span><div class="chips">${consultationTypeOptions.environmentalDamage.map(sc=>`<label class="chip"><input type="checkbox" value="${sc}" ${(state.consultation.consultationTypes.environmentalDamage||[]).includes(sc)?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','environmentalDamage'], this.value, this.checked)">${sc}</label>`).join('')}</div></div>`;
reception_form.html:557:          childHtml += `<div class="field indent-2"><span class="label">生態系かく乱詳細（複数選択可）</span><div class="chips">${consultationTypeOptions.ecologicalDisturbance.map(sc=>`<label class="chip"><input type="checkbox" value="${sc}" ${(state.consultation.consultationTypes.ecologicalDisturbance||[]).includes(sc)?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','ecologicalDisturbance'], this.value, this.checked)">${sc}</label>`).join('')}</div></div>`;
reception_form.html:561:          childHtml += `<div class="field indent-2"><span class="label">傷病鳥獣詳細（複数選択可）</span><div class="chips"><label class="chip"><input type="checkbox" value="保護" ${(state.consultation.consultationTypes.injuredWildlife||[]).includes('保護')?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','injuredWildlife'], this.value, this.checked)">保護</label><label class="chip"><input type="checkbox" value="駆除" ${(state.consultation.consultationTypes.injuredWildlife||[]).includes('駆除')?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','injuredWildlife'], this.value, this.checked)">駆除</label><label class="chip"><input type="checkbox" value="その他" ${(state.consultation.consultationTypes.injuredWildlife||[]).includes('その他')?'checked':''} onchange="onToggleArray(['consultation','consultationTypes','injuredWildlife'], this.value, this.checked)">その他</label></div></div>`;
reception_form.html:574:            <div class="field"><span class="label">相談詳細</span><textarea oninput="setInNoRender(['consultation','details'], this.value)">${state.consultation.details||''}</textarea>
reception_form.html:580:            <div class="field"><span class="label">対応種類（複数選択可）</span>
reception_form.html:584:                    <label class="chip"><input type="checkbox" value="${opt}" ${(state.response.responseTypes||[]).includes(opt)?'checked':''} onchange="onToggleArray(['response','responseTypes'], this.value, this.checked)">${opt}</label>
reception_form.html:587:                        <label class="chip"><input type="checkbox" ${state.response.otherOrganizations.introduceSelected?'checked':''} onchange="setIn(['response','otherOrganizations','introduceSelected'], this.checked)">紹介（詳細選択肢あり）</label>
reception_form.html:589:                          <div class="chips indent-2" style="margin-top: 8px;">${Object.keys(otherOrganizationsOptions['紹介（詳細選択肢あり）']).map(o=>`<label class="chip"><input type="checkbox" value="${o}" ${(state.response.otherOrganizations.introduce||[]).includes(o)?'checked':''} onchange="onToggleArray(['response','otherOrganizations','introduce'], this.value, this.checked)">${o}</label>`).join('')}</div>
reception_form.html:591:                            <div class="field indent-2"><span class="label">${o} 詳細</span>
reception_form.html:592:                              <div class="chips">${otherOrganizationsOptions['紹介（詳細選択肢あり）'][o].map(sub=>`<label class="chip"><input type="checkbox" value="${sub}" ${((state.response.otherOrganizations.introduceDetails||{})[o]||[]).includes(sub)?'checked':''} onchange="onToggleNestedArray(['response','otherOrganizations','introduceDetails','${o}'], this.value, this.checked)">${sub}</label>`).join('')}</div>
reception_form.html:596:                            <div class="field indent-2"><span class="label">その他（具体的に）</span><input type="text" value="${state.response.otherOrganizationsOther.introduce||''}" oninput="setInNoRender(['response','otherOrganizationsOther','introduce'], this.value)"></div>
reception_form.html:601:                        <label class="chip"><input type="checkbox" ${state.response.otherOrganizations.requestSelected?'checked':''} onchange="setIn(['response','otherOrganizations','requestSelected'], this.checked)">依頼（詳細選択肢あり）</label>
reception_form.html:603:                          <div class="chips indent-2" style="margin-top: 8px;">${Object.keys(otherOrganizationsOptions['依頼（詳細選択肢あり）']).map(o=>`<label class="chip"><input type="checkbox" value="${o}" ${(state.response.otherOrganizations.request||[]).includes(o)?'checked':''} onchange="onToggleArray(['response','otherOrganizations','request'], this.value, this.checked)">${o}</label>`).join('')}</div>
reception_form.html:605:                            <div class="field indent-2"><span class="label">${o} 詳細</span>
reception_form.html:606:                              <div class="chips">${otherOrganizationsOptions['依頼（詳細選択肢あり）'][o].map(sub=>`<label class="chip"><input type="checkbox" value="${sub}" ${((state.response.otherOrganizations.requestDetails||{})[o]||[]).includes(sub)?'checked':''} onchange="onToggleNestedArray(['response','otherOrganizations','requestDetails','${o}'], this.value, this.checked)">${sub}</label>`).join('')}</div>
reception_form.html:610:                            <div class="field indent-2"><span class="label">その他（具体的に）</span><input type="text" value="${state.response.otherOrganizationsOther.request||''}" oninput="setInNoRender(['response','otherOrganizationsOther','request'], this.value)"></div>
reception_form.html:615:                      <div class="field indent-1"><span class="label">駆除対応詳細（複数選択可）</span>
reception_form.html:616:                        <div class="chips">${removalDetailOptions.map(o=>`<label class="chip"><input type="checkbox" value="${o}" ${(state.consultation.subcategories||[]).includes(o)?'checked':''} onchange="onToggleArray(['consultation','subcategories'], this.value, this.checked)">${o}</label>`).join('')}</div>
reception_form.html:619:                        <div class="field indent-2"><span class="label">駆除対応詳細 その他（具体的に）</span><input type="text" value="${state.response.removalDetailOtherText||''}" oninput="setInNoRender(['response','removalDetailOtherText'], this.value)"></div>
reception_form.html:626:            <div class="field"><span class="label">対応内容</span><textarea oninput="setInNoRender(['response','responseContent'], this.value)">${state.response.responseContent||''}</textarea></div>
reception_form.html:628:            <div class="field"><span class="label">追加対応</span>
reception_form.html:631:                  <label class="chip" style="margin-bottom:8px;"><input type="checkbox" ${it.needsFollowup?'checked':''} onchange="(()=>{ const arr=state.response.followupItems.slice(); arr[${idx}].needsFollowup=this.checked; setIn(['response','followupItems'], arr); addFollowupIfNeeded(${idx}); })()">${idx === 0 ? '要追加対応' : `要追加対応（${idx+1}回目）`}</label>
reception_form.html:643:              <div class="field"><span class="label">個別案件タグ</span><input type="text" value="${state.response.individualCaseTag||''}" oninput="setInNoRender(['response','individualCaseTag'], this.value)"></div>
reception_form.html:644:              <div class="field"><span class="label">備考</span><input type="text" value="${state.response.remarks||''}" oninput="setInNoRender(['response','remarks'], this.value)"></div>
webapp.html:302:    .form-group label {
webapp.html:1035:      const label = `行 ${index+1}`;
webapp.html:1036:      if (confirm(`「${label}」を削除してもよろしいですか？\nこの操作は取り消せません。`)) {
debug.html:56:    .form-group label {
debug.html:84:      <label>簡単JSON 用シート名</label>
debug.html:88:      <label>多ケースJSON 用シート名</label>
debug.html:97:      <label>読み戻し対象シート名</label>
form_builder.html:21:    .label{ display:block; font-size:12px; color:var(--muted); margin:6px 0; }
form_builder.html:46:          <label class="label">CSV ファイル</label>
form_builder.html:48:          <label class="label">文字コード</label>
form_builder.html:55:          <label class="label">CSV テキスト（ペースト可）</label>
form_builder.html:72:          <label class="label">MODEL JSON</label>
form_builder.html:76:          <label class="label">HTML プレビュー</label>
